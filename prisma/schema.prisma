// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model Nacionalidad {
  id        Int         @id @default(autoincrement())
  nombre    String
  provincias Provincia[]  // Relación uno a muchos con Provincia
}

model Provincia {
  id        Int         @id @default(autoincrement())
  nombre    String
  nacionalidad   Nacionalidad @relation(fields: [nacionalidadId], references: [id])
  nacionalidadId Int 
  localidades  Localidad[]   // Relación uno a muchos con Localidad
}

model Localidad {
  id        Int         @id @default(autoincrement())
  nombre    String
  provincia   Provincia @relation(fields: [provinciaId], references: [id])
  provinciaId Int 
  direcciones Direccion[]  // Relación uno a muchos con Direccion
}

model Direccion {
  id          Int        @id @default(autoincrement())
  calle       String
  numero      Int
  localidad   Localidad  @relation(fields: [localidadId], references: [id])
  localidadId Int     
  alumnos     Alumno[]   // Relación de uno a muchos con Alumno
  profesional Profesional[] // Relación de uno a muchos con Profesional
  administrador Administrador[] // Relación de uno a muchos con Administrador

}

model Rol {
  id   Int    @id @default(autoincrement())
  nombre String
  Alumno Alumno[]
  Profesional Profesional[]
  Administrador Administrador[]
}

model Administrador {
  id       Int       @id @default(autoincrement())
  nombre   String
  apellido String
  email    String    @unique
  password String
  direccion Direccion @relation(fields: [direccionId], references: [id])
  direccionId Int
  rolId Int
  rol Rol @relation(fields: [rolId], references: [id])
}
model Profesional {
  id           Int       @id @default(autoincrement())
  nombre       String
  apellido     String
  especialidad String
  email        String    @unique
  password     String      @unique
  telefono     BigInt      @unique
  direccion    Direccion @relation(fields: [direccionId], references: [id])
  direccionId  Int      

  prof_cur Profesional_Curso[]
  rolId Int
  rol Rol @relation(fields: [rolId], references: [id])
}

model Profesional_Curso {
  id      Int   @id @default(autoincrement())
  curso   Curso @relation(fields: [cursoId], references: [id])
  cursoId Int   

  profesional   Profesional @relation(fields: [profesionalId], references: [id])
  profesionalId Int         
}

model Curso {
  id          Int    @id @default(autoincrement())
  nombre      String
  year        Int
  descripcion String
  imagen      String?
  prof_cur   Profesional_Curso[]
  cronograma Cronograma[]
  alum_cur   Alumno_Curso[]
}

model Alumno {
  id          Int        @id @default(autoincrement())
  nombre      String
  apellido    String
  dni         Int?     @unique
  telefono    Int?     @unique

  direccionId Int?    
  direccion   Direccion? @relation(fields: [direccionId], references: [id])  // Relación de muchos a uno
  email       String     @unique
  password    String

  alum_cur    Alumno_Curso[]
  rolId Int 
  rol Rol @relation(fields: [rolId], references: [id])
}


model Alumno_Curso {
  id       Int    @id @default(autoincrement())
  alumno   Alumno @relation(fields: [alumnoId], references: [id])
  alumnoId Int    

  curso   Curso @relation(fields: [cursoId], references: [id])
  cursoId Int   

  pagos Pagos[]
}

model Pagos {
  id       Int          @id @default(autoincrement())
  alum_cur Alumno_Curso @relation(fields: [Id], references: [id])
  Id       Int          @unique
}





model Cronograma {
  id        Int                 @id @default(autoincrement())
  curso     Curso               @relation(fields: [cursoId], references: [id])
  cursoId   Int
  aula      Aula                @relation(fields: [aulaId], references: [id])
  aulaId    Int                
  diasHoras CronogramaDiaHora[] // Relación con la tabla intermedia para días y horas
}

model Aula {
  id         Int                     @id @default(autoincrement())
  nombre     String
  cronogramas Cronograma[]           // Relación uno a muchos con Cronograma
}

model Dia {
  id                  Int                 @id @default(autoincrement())
  nombre              String // Ejemplo: Lunes, Martes, Miércoles
  cronogramaDiasHoras CronogramaDiaHora[] // Relación con la tabla intermedia
}

model CronogramaDiaHora {
  id          Int        @id @default(autoincrement())
  cronograma  Cronograma @relation(fields: [cronogramaId], references: [id])
  cronogramaId Int
  dia         Dia        @relation(fields: [diaId], references: [id])
  diaId       Int
  hora        Hora       @relation(fields: [horaId], references: [id])
  horaId      Int

  @@unique([cronogramaId, diaId, horaId]) // Evitar duplicados
}


model Hora {
  id                  Int                 @id @default(autoincrement())
  hora_inicio         String
  cronogramaDiasHoras CronogramaDiaHora[] // Relación con la tabla intermedia
}

